{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "11811803882424645684"
    }
  },
  "parameters": {
    "environmentType": {
      "type": "string",
      "defaultValue": "nonprod",
      "allowedValues": [
        "nonprod",
        "prod"
      ],
      "metadata": {
        "description": "The environment type (nonprod or prod)"
      }
    },
    "postgresSQLServerName": {
      "type": "string",
      "defaultValue": "ie-bank-db-server-dev",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "The PostgreSQL Server name"
      }
    },
    "postgresSQLDatabaseName": {
      "type": "string",
      "defaultValue": "ie-bank-db",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "The PostgreSQL Database name"
      }
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "ie-bank-app-sp-dev",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "The App Service Plan name"
      }
    },
    "appServiceAppName": {
      "type": "string",
      "defaultValue": "ie-bank-dev",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "The Web App name (frontend)"
      }
    },
    "appServiceAPIAppName": {
      "type": "string",
      "defaultValue": "ie-bank-api-dev",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "The API App name (backend)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The Azure location where the resources will be deployed"
      }
    },
    "appServiceAPIEnvVarENV": {
      "type": "string",
      "metadata": {
        "description": "The value for the environment variable ENV"
      }
    },
    "appServiceAPIEnvVarDBHOST": {
      "type": "string",
      "metadata": {
        "description": "The value for the environment variable DBHOST"
      }
    },
    "appServiceAPIEnvVarDBNAME": {
      "type": "string",
      "metadata": {
        "description": "The value for the environment variable DBNAME"
      }
    },
    "appServiceAPIEnvVarDBPASS": {
      "type": "securestring",
      "metadata": {
        "description": "The value for the environment variable DBPASS"
      }
    },
    "appServiceAPIDBHostDBUSER": {
      "type": "string",
      "metadata": {
        "description": "The value for the environment variable DBUSER"
      }
    },
    "appServiceAPIDBHostFLASK_APP": {
      "type": "string",
      "metadata": {
        "description": "The value for the environment variable FLASK_APP"
      }
    },
    "appServiceAPIDBHostFLASK_DEBUG": {
      "type": "string",
      "metadata": {
        "description": "The value for the environment variable FLASK_DEBUG"
      }
    },
    "containerRegistryName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Container Registry"
      }
    },
    "dockerRegistryImageName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Docker image"
      }
    },
    "dockerRegistryImageTag": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "The tag of the Docker image"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Log Analytics Workspace"
      }
    },
    "appInsightsName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Application Insights resource"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "ie-bank-kv-dev",
      "metadata": {
        "description": "The name of the Key Vault"
      }
    },
    "keyVaultRoleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The arrasy of role assignments for the Key Vault"
      }
    },
    "keyVaultSecretNameAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Name of the secret to store the admin username"
      }
    },
    "keyVaultSecretNameAdminPassword0": {
      "type": "string",
      "metadata": {
        "description": "Name of the secret to store the admin password 0"
      }
    },
    "keyVaultSecretNameAdminPassword1": {
      "type": "string",
      "metadata": {
        "description": "Name of the secret to store the admin password 1"
      }
    },
    "staticWebAppName": {
      "type": "string",
      "defaultValue": "ie-bank-swa-dev",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "The name of the Static Web App"
      }
    },
    "swaLocation": {
      "type": "string",
      "defaultValue": "[parameters('location')]",
      "metadata": {
        "description": "The location where the Static Web App will be deployed"
      }
    }
  },
  "variables": {
    "logAnalyticsWorkspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyVault",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "roleAssignments": {
            "value": "[parameters('keyVaultRoleAssignments')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[variables('logAnalyticsWorkspaceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "17380489344282693307"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "[format('mykv{0}', uniqueString(resourceGroup().id))]"
            },
            "enableVaultForDeployment": {
              "type": "bool",
              "defaultValue": true
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": []
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "myDiagnosticSetting"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                "enableRbacAuthorization": true,
                "enableSoftDelete": false,
                "enabledForTemplateDeployment": true,
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": []
              }
            },
            {
              "copy": {
                "name": "keyVault_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AuditEvent",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the key vault."
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultUri": {
              "type": "string",
              "metadata": {
                "description": "The URI of the key vault."
              },
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "logAnalytics",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "3384902471337215249"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-08-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": 30
              }
            }
          ],
          "outputs": {
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appInsights",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "appInsightsName": {
            "value": "[parameters('appInsightsName')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[variables('logAnalyticsWorkspaceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "6355896125785830118"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location of the resource"
              }
            },
            "appInsightsName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Application Insights resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace ID"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('appInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]"
              }
            }
          ],
          "outputs": {
            "appInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            "appInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logAnalytics')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appService",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environmentType": {
            "value": "[parameters('environmentType')]"
          },
          "appServiceAppName": {
            "value": "[parameters('appServiceAppName')]"
          },
          "appServiceAPIAppName": {
            "value": "[parameters('appServiceAPIAppName')]"
          },
          "appServicePlanName": {
            "value": "[parameters('appServicePlanName')]"
          },
          "appServiceAPIDBHostDBUSER": {
            "value": "[parameters('appServiceAPIDBHostDBUSER')]"
          },
          "appServiceAPIDBHostFLASK_APP": {
            "value": "[parameters('appServiceAPIDBHostFLASK_APP')]"
          },
          "appServiceAPIDBHostFLASK_DEBUG": {
            "value": "[parameters('appServiceAPIDBHostFLASK_DEBUG')]"
          },
          "appServiceAPIEnvVarDBHOST": {
            "value": "[parameters('appServiceAPIEnvVarDBHOST')]"
          },
          "appServiceAPIEnvVarDBNAME": {
            "value": "[parameters('appServiceAPIEnvVarDBNAME')]"
          },
          "appServiceAPIEnvVarDBPASS": {
            "value": "[parameters('appServiceAPIEnvVarDBPASS')]"
          },
          "appServiceAPIEnvVarENV": {
            "value": "[parameters('appServiceAPIEnvVarENV')]"
          },
          "dockerRegistryImageName": {
            "value": "[parameters('dockerRegistryImageName')]"
          },
          "dockerRegistryImageTag": {
            "value": "[parameters('dockerRegistryImageTag')]"
          },
          "containerRegistryName": {
            "value": "[parameters('containerRegistryName')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[variables('logAnalyticsWorkspaceId')]"
          },
          "staticappServiceAppName": {
            "value": "[parameters('staticWebAppName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appInsights'), '2022-09-01').outputs.appInsightsInstrumentationKey.value]"
          },
          "appInsightsConnectionString": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appInsights'), '2022-09-01').outputs.appInsightsConnectionString.value]"
          },
          "keyVaultResourceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.keyVaultResourceId.value]"
          },
          "keyVaultSecretNameAdminUsername": {
            "value": "[parameters('keyVaultSecretNameAdminUsername')]"
          },
          "keyVaultSecretNameAdminPassword0": {
            "value": "[parameters('keyVaultSecretNameAdminPassword0')]"
          },
          "keyVaultSecretNameAdminPassword1": {
            "value": "[parameters('keyVaultSecretNameAdminPassword1')]"
          },
          "postgresSQLServerName": {
            "value": "[parameters('postgresSQLServerName')]"
          },
          "postgresSQLDatabaseName": {
            "value": "[parameters('postgresSQLDatabaseName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "15167730869305062607"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "appServicePlanName": {
              "type": "string"
            },
            "appServiceAppName": {
              "type": "string"
            },
            "staticappServiceAppName": {
              "type": "string"
            },
            "appServiceAPIAppName": {
              "type": "string"
            },
            "appServiceAPIEnvVarENV": {
              "type": "string"
            },
            "appServiceAPIEnvVarDBHOST": {
              "type": "string"
            },
            "appServiceAPIEnvVarDBNAME": {
              "type": "string"
            },
            "appServiceAPIEnvVarDBPASS": {
              "type": "securestring"
            },
            "appServiceAPIDBHostDBUSER": {
              "type": "string"
            },
            "appServiceAPIDBHostFLASK_APP": {
              "type": "string"
            },
            "appServiceAPIDBHostFLASK_DEBUG": {
              "type": "string"
            },
            "environmentType": {
              "type": "string",
              "allowedValues": [
                "nonprod",
                "prod"
              ]
            },
            "containerRegistryName": {
              "type": "string"
            },
            "dockerRegistryImageName": {
              "type": "string"
            },
            "dockerRegistryImageTag": {
              "type": "string"
            },
            "appInsightsInstrumentationKey": {
              "type": "string"
            },
            "appInsightsConnectionString": {
              "type": "string"
            },
            "keyVaultResourceId": {
              "type": "string"
            },
            "keyVaultSecretNameAdminUsername": {
              "type": "string",
              "metadata": {
                "description": "Name of the secret to store the admin username"
              }
            },
            "keyVaultSecretNameAdminPassword0": {
              "type": "string",
              "metadata": {
                "description": "Name of the secret to store the admin password 0"
              }
            },
            "keyVaultSecretNameAdminPassword1": {
              "type": "string",
              "metadata": {
                "description": "Name of the secret to store the admin password 1"
              }
            },
            "postgresSQLServerName": {
              "type": "string"
            },
            "postgresSQLDatabaseName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            }
          },
          "variables": {
            "appServicePlanSkuName": "[if(equals(parameters('environmentType'), 'prod'), 'B1', 'B1')]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "containerRegistry",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "registryName": {
                    "value": "[parameters('containerRegistryName')]"
                  },
                  "keyVaultResourceId": {
                    "value": "[parameters('keyVaultResourceId')]"
                  },
                  "keyVaultSecretNameAdminUsername": {
                    "value": "[parameters('keyVaultSecretNameAdminUsername')]"
                  },
                  "keyVaultSecretNameAdminPassword0": {
                    "value": "[parameters('keyVaultSecretNameAdminPassword0')]"
                  },
                  "keyVaultSecretNameAdminPassword1": {
                    "value": "[parameters('keyVaultSecretNameAdminPassword1')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "13634412530307670121"
                    }
                  },
                  "parameters": {
                    "ContainerRegistryDiagnostics": {
                      "type": "string",
                      "defaultValue": "myDiagnosticSetting"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "registryName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Azure Container Registry"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Resource group location"
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "metadata": {
                        "description": "The SKU of the Azure Container Registry (Basic, Standard, Premium)"
                      }
                    },
                    "keyVaultResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Azure Key Vault"
                      }
                    },
                    "keyVaultSecretNameAdminUsername": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the secret to store the admin username"
                      }
                    },
                    "keyVaultSecretNameAdminPassword0": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the secret to store the admin password 0"
                      }
                    },
                    "keyVaultSecretNameAdminPassword1": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the secret to store the admin password 1"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2023-07-01",
                      "name": "[parameters('registryName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "properties": {
                        "adminUserEnabled": true
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-07-01",
                      "name": "[format('{0}/{1}', last(split(parameters('keyVaultResourceId'), '/')), parameters('keyVaultSecretNameAdminUsername'))]",
                      "properties": {
                        "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2023-07-01').username]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-07-01",
                      "name": "[format('{0}/{1}', last(split(parameters('keyVaultResourceId'), '/')), parameters('keyVaultSecretNameAdminPassword0'))]",
                      "properties": {
                        "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2023-07-01').passwords[0].value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-07-01",
                      "name": "[format('{0}/{1}', last(split(parameters('keyVaultResourceId'), '/')), parameters('keyVaultSecretNameAdminPassword1'))]",
                      "properties": {
                        "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2023-07-01').passwords[1].value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('registryName'))]",
                      "name": "[parameters('ContainerRegistryDiagnostics')]",
                      "properties": {
                        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "logs": [
                          {
                            "category": "ContainerRegistryLoginEvents",
                            "enabled": true
                          },
                          {
                            "category": "ContainerRegistryRepositoryEvents",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "category": "AllMetrics",
                            "enabled": true
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "appServicePlan",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "appServicePlanName": {
                    "value": "[parameters('appServicePlanName')]"
                  },
                  "skuName": {
                    "value": "[variables('appServicePlanSkuName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "15198680851354512806"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "appServicePlanName": {
                      "type": "string"
                    },
                    "skuName": {
                      "type": "string",
                      "allowedValues": [
                        "B1",
                        "F1"
                      ]
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/serverfarms",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('appServicePlanName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "kind": "linux",
                      "properties": {
                        "reserved": true
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "backend",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "appServiceAPIAppName": {
                    "value": "[parameters('appServiceAPIAppName')]"
                  },
                  "appServicePlanId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlan'), '2022-09-01').outputs.id.value]"
                  },
                  "containerRegistryName": {
                    "value": "[parameters('containerRegistryName')]"
                  },
                  "dockerRegistryUserName": {
                    "reference": {
                      "keyVault": {
                        "id": "[resourceId('Microsoft.KeyVault/vaults', last(split(parameters('keyVaultResourceId'), '/')))]"
                      },
                      "secretName": "[parameters('keyVaultSecretNameAdminUsername')]"
                    }
                  },
                  "dockerRegistryPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[resourceId('Microsoft.KeyVault/vaults', last(split(parameters('keyVaultResourceId'), '/')))]"
                      },
                      "secretName": "[parameters('keyVaultSecretNameAdminPassword0')]"
                    }
                  },
                  "dockerRegistryImageName": {
                    "value": "[parameters('dockerRegistryImageName')]"
                  },
                  "dockerRegistryImageTag": {
                    "value": "[parameters('dockerRegistryImageTag')]"
                  },
                  "appSettings": {
                    "value": [
                      {
                        "name": "ENV",
                        "value": "[parameters('appServiceAPIEnvVarENV')]"
                      },
                      {
                        "name": "DBHOST",
                        "value": "[parameters('appServiceAPIEnvVarDBHOST')]"
                      },
                      {
                        "name": "DBNAME",
                        "value": "[parameters('appServiceAPIEnvVarDBNAME')]"
                      },
                      {
                        "name": "DBPASS",
                        "value": "[parameters('appServiceAPIEnvVarDBPASS')]"
                      },
                      {
                        "name": "DBUSER",
                        "value": "[parameters('appServiceAPIDBHostDBUSER')]"
                      },
                      {
                        "name": "FLASK_APP",
                        "value": "[parameters('appServiceAPIDBHostFLASK_APP')]"
                      },
                      {
                        "name": "FLASK_DEBUG",
                        "value": "[parameters('appServiceAPIDBHostFLASK_DEBUG')]"
                      },
                      {
                        "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                        "value": "true"
                      },
                      {
                        "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                        "value": "[parameters('appInsightsInstrumentationKey')]"
                      },
                      {
                        "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                        "value": "[parameters('appInsightsConnectionString')]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "17276699165421728893"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "appServiceAPIAppName": {
                      "type": "string"
                    },
                    "appServicePlanId": {
                      "type": "string"
                    },
                    "containerRegistryName": {
                      "type": "string"
                    },
                    "dockerRegistryUserName": {
                      "type": "securestring"
                    },
                    "dockerRegistryPassword": {
                      "type": "securestring"
                    },
                    "dockerRegistryImageName": {
                      "type": "string"
                    },
                    "dockerRegistryImageTag": {
                      "type": "string",
                      "defaultValue": "latest"
                    },
                    "appSettings": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "appCommandLine": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "dockerAppSettings": [
                      {
                        "name": "DOCKER_REGISTRY_SERVER_URL",
                        "value": "[format('https://{0}.azurecr.io', parameters('containerRegistryName'))]"
                      },
                      {
                        "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                        "value": "[parameters('dockerRegistryUserName')]"
                      },
                      {
                        "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                        "value": "[parameters('dockerRegistryPassword')]"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('appServiceAPIAppName')]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "httpsOnly": true,
                        "siteConfig": {
                          "linuxFxVersion": "[format('DOCKER|{0}.azurecr.io/{1}:{2}', parameters('containerRegistryName'), parameters('dockerRegistryImageName'), parameters('dockerRegistryImageTag'))]",
                          "alwaysOn": false,
                          "ftpsState": "FtpsOnly",
                          "appCommandLine": "[parameters('appCommandLine')]",
                          "appSettings": "[union(parameters('appSettings'), variables('dockerAppSettings'))]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appServiceAppHostName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceAPIAppName')), '2022-03-01').defaultHostName]"
                    },
                    "systemAssignedIdentityPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceAPIAppName')), '2022-03-01', 'full').identity.principalId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'appServicePlan')]",
                "[resourceId('Microsoft.Resources/deployments', 'containerRegistry')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "applicationDatabase",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "environmentType": {
                    "value": "[parameters('environmentType')]"
                  },
                  "postgresSQLServerName": {
                    "value": "[parameters('postgresSQLServerName')]"
                  },
                  "postgresSQLDatabaseName": {
                    "value": "[parameters('postgresSQLDatabaseName')]"
                  },
                  "postgreSQLAdminServicePrincipalObjectId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'backend'), '2022-09-01').outputs.systemAssignedIdentityPrincipalId.value]"
                  },
                  "postgreSQLAdminServicePrincipalName": {
                    "value": "[parameters('appServiceAPIAppName')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "17381523326539410692"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Deployment location"
                      }
                    },
                    "environmentType": {
                      "type": "string",
                      "defaultValue": "nonprod",
                      "metadata": {
                        "description": "Environment type for deployment"
                      }
                    },
                    "postgresSQLServerName": {
                      "type": "string"
                    },
                    "postgresSQLDatabaseName": {
                      "type": "string"
                    },
                    "postgreSQLAdminServicePrincipalObjectId": {
                      "type": "string"
                    },
                    "postgreSQLAdminServicePrincipalName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "postgresSQLServer",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "environmentType": {
                            "value": "[parameters('environmentType')]"
                          },
                          "postgresSQLServerName": {
                            "value": "[parameters('postgresSQLServerName')]"
                          },
                          "postgreSQLAdminServicePrincipalObjectId": {
                            "value": "[parameters('postgreSQLAdminServicePrincipalObjectId')]"
                          },
                          "postgreSQLAdminServicePrincipalName": {
                            "value": "[parameters('postgreSQLAdminServicePrincipalName')]"
                          },
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "16551908835436158643"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "environmentType": {
                              "type": "string",
                              "defaultValue": "nonprod"
                            },
                            "postgresSQLServerName": {
                              "type": "string",
                              "defaultValue": "ie-bank-db-server-dev"
                            },
                            "postgreSQLAdminServicePrincipalObjectId": {
                              "type": "string"
                            },
                            "postgreSQLAdminServicePrincipalName": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "skuName": "[if(equals(parameters('environmentType'), 'prod'), 'Standard_B1ms', 'Standard_B1ms')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
                              "apiVersion": "2022-12-01",
                              "name": "[format('{0}/{1}', parameters('postgresSQLServerName'), 'AllowAllAzureServicesAndResourcesWithinAzureIps')]",
                              "properties": {
                                "endIpAddress": "0.0.0.0",
                                "startIpAddress": "0.0.0.0"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresSQLServerName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.DBforPostgreSQL/flexibleServers/administrators",
                              "apiVersion": "2022-12-01",
                              "name": "[format('{0}/{1}', parameters('postgresSQLServerName'), parameters('postgreSQLAdminServicePrincipalObjectId'))]",
                              "properties": {
                                "principalName": "[parameters('postgreSQLAdminServicePrincipalName')]",
                                "principalType": "ServicePrincipal",
                                "tenantId": "[subscription().tenantId]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresSQLServerName'))]",
                                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers/firewallRules', parameters('postgresSQLServerName'), 'AllowAllAzureServicesAndResourcesWithinAzureIps')]"
                              ]
                            },
                            {
                              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
                              "apiVersion": "2022-12-01",
                              "name": "[parameters('postgresSQLServerName')]",
                              "location": "[parameters('location')]",
                              "sku": {
                                "name": "[variables('skuName')]",
                                "tier": "Burstable"
                              },
                              "properties": {
                                "administratorLogin": "iebankdbadmin",
                                "administratorLoginPassword": "IE.Bank.DB.Admin.Pa$$",
                                "createMode": "Default",
                                "highAvailability": {
                                  "mode": "Disabled",
                                  "standbyAvailabilityZone": ""
                                },
                                "storage": {
                                  "storageSizeGB": 32
                                },
                                "backup": {
                                  "backupRetentionDays": 7,
                                  "geoRedundantBackup": "Disabled"
                                },
                                "version": "15",
                                "authConfig": {
                                  "activeDirectoryAuth": "Enabled",
                                  "passwordAuth": "Enabled",
                                  "tenantId": "[subscription().tenantId]"
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.DBforPostgreSQL/flexibleServers/{0}', parameters('postgresSQLServerName'))]",
                              "name": "PostgreSQLServerDiagnostic",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "metrics": [
                                  {
                                    "category": "AllMetrics",
                                    "enabled": true
                                  }
                                ],
                                "logs": [
                                  {
                                    "category": "PostgreSQLLogs",
                                    "enabled": true
                                  },
                                  {
                                    "category": "PostgreSQLFlexSessions",
                                    "enabled": true
                                  },
                                  {
                                    "category": "PostgreSQLFlexQueryStoreRuntime",
                                    "enabled": true
                                  },
                                  {
                                    "category": "PostgreSQLFlexQueryStoreWaitStats",
                                    "enabled": true
                                  },
                                  {
                                    "category": "PostgreSQLFlexTableStats",
                                    "enabled": true
                                  },
                                  {
                                    "category": "PostgreSQLFlexDatabaseXacts",
                                    "enabled": true
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresSQLServerName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "postgresSQLServerName": {
                              "type": "string",
                              "value": "[parameters('postgresSQLServerName')]"
                            },
                            "resourceOutput": {
                              "type": "object",
                              "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresSQLServerName')), '2022-12-01', 'full')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "postgresSQLDatabase",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "postgresSQLServerName": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'postgresSQLServer'), '2022-09-01').outputs.postgresSQLServerName.value]"
                          },
                          "postgresSQLDatabaseName": {
                            "value": "[parameters('postgresSQLDatabaseName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "16444654380130697232"
                            }
                          },
                          "parameters": {
                            "postgresSQLDatabaseName": {
                              "type": "string",
                              "defaultValue": "ie-bank-db"
                            },
                            "postgresSQLServerName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
                              "apiVersion": "2022-12-01",
                              "name": "[format('{0}/{1}', parameters('postgresSQLServerName'), parameters('postgresSQLDatabaseName'))]",
                              "properties": {
                                "charset": "UTF8",
                                "collation": "en_US.UTF8"
                              }
                            }
                          ],
                          "outputs": {
                            "postgresSQLDatabaseName": {
                              "type": "string",
                              "value": "[parameters('postgresSQLDatabaseName')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'postgresSQLServer')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "postgresSQLServerName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'postgresSQLServer'), '2022-09-01').outputs.postgresSQLServerName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'backend')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "frontendAppService",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appServiceAppName": {
                    "value": "[parameters('appServiceAppName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "appServicePlanId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServicePlan'), '2022-09-01').outputs.id.value]"
                  },
                  "appInsightsInstrumentationKey": {
                    "value": "[parameters('appInsightsInstrumentationKey')]"
                  },
                  "appInsightsConnectionString": {
                    "value": "[parameters('appInsightsConnectionString')]"
                  },
                  "name": {
                    "value": "[parameters('staticappServiceAppName')]"
                  },
                  "sku": {
                    "value": "Standard"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "1613010831947642543"
                    }
                  },
                  "parameters": {
                    "appServiceAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the App Service application"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location where the App Service will be deployed"
                      }
                    },
                    "appServicePlanId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the App Service Plan this App Service will use"
                      }
                    },
                    "appInsightsInstrumentationKey": {
                      "type": "string",
                      "metadata": {
                        "description": "Application Insights Instrumentation Key for monitoring"
                      }
                    },
                    "appInsightsConnectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "Application Insights Connection String for monitoring"
                      }
                    },
                    "appCommandLine": {
                      "type": "string",
                      "defaultValue": "pm2 serve /home/site/wwwroot --spa --no-daemon",
                      "metadata": {
                        "description": "The command line to run for the App Service"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the static web app"
                      }
                    },
                    "sku": {
                      "type": "string",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "The service tier"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('appServiceAppName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "httpsOnly": true,
                        "siteConfig": {
                          "linuxFxVersion": "NODE|18-lts",
                          "alwaysOn": false,
                          "ftpsState": "FtpsOnly",
                          "appCommandLine": "[parameters('appCommandLine')]",
                          "appSettings": [
                            {
                              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                              "value": "[parameters('appInsightsInstrumentationKey')]"
                            },
                            {
                              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                              "value": "[parameters('appInsightsConnectionString')]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Web/staticSites",
                      "apiVersion": "2024-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "allowConfigFileUpdates": false
                      },
                      "sku": {
                        "name": "[parameters('sku')]",
                        "tier": "Standard"
                      }
                    }
                  ],
                  "outputs": {
                    "appServiceAppHostName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceAppName')), '2022-03-01').defaultHostName]"
                    },
                    "staticWebAppUrl": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/staticSites', parameters('name')), '2024-04-01').defaultHostname]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'appServicePlan')]"
              ]
            }
          ],
          "outputs": {
            "appServiceAppHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'frontendAppService'), '2022-09-01').outputs.appServiceAppHostName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appInsights')]",
        "[resourceId('Microsoft.Resources/deployments', 'keyVault')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "staticWebApp",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('staticWebAppName')]"
          },
          "location": {
            "value": "[parameters('swaLocation')]"
          },
          "sku": {
            "value": "Standard"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "1642389011409097610"
            },
            "name": "Static Web Apps",
            "description": "This module deploys a Static Web App.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateEndpointType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private endpoint."
                    }
                  },
                  "location": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The location to deploy the private endpoint to."
                    }
                  },
                  "service": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                    }
                  },
                  "subnetResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                    }
                  },
                  "privateDnsZoneGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                    }
                  },
                  "privateDnsZoneResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                    }
                  },
                  "isManualConnection": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. If Manual Private Link Connection is required."
                    }
                  },
                  "manualConnectionRequestMessage": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 140,
                    "metadata": {
                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                    }
                  },
                  "customDnsConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Custom DNS configurations."
                    }
                  },
                  "ipConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                    }
                  },
                  "applicationSecurityGroupResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                    }
                  },
                  "customNetworkInterfaceName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                    }
                  },
                  "lock": {
                    "$ref": "#/definitions/lockType",
                    "metadata": {
                      "description": "Optional. Specify the type of lock."
                    }
                  },
                  "roleAssignments": {
                    "$ref": "#/definitions/roleAssignmentType",
                    "metadata": {
                      "description": "Optional. Array of role assignments to create."
                    }
                  },
                  "tags": {
                    "type": "object",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                    }
                  },
                  "enableTelemetry": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable/Disable usage telemetry for module."
                    }
                  },
                  "resourceGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 40,
              "metadata": {
                "description": "Required. The name of the static site."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Free",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The service tier and name of the resource SKU."
              }
            },
            "allowConfigFileUpdates": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. False if config file is locked for this static web app; otherwise, true."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "stagingEnvironmentPolicy": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. State indicating whether staging environments are allowed or not allowed for a static web app."
              }
            },
            "enterpriseGradeCdnStatus": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Disabling",
                "Enabled",
                "Enabling"
              ],
              "metadata": {
                "description": "Optional. State indicating the status of the enterprise grade CDN serving traffic to the static web app."
              }
            },
            "buildProperties": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Build properties for the static site."
              }
            },
            "templateProperties": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Template Options for the static site."
              }
            },
            "provider": {
              "type": "string",
              "defaultValue": "None",
              "metadata": {
                "description": "Optional. The provider that submitted the last deployment to the primary environment of the static site."
              }
            },
            "repositoryToken": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Personal Access Token for accessing the GitHub repository."
              }
            },
            "repositoryUrl": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The name of the GitHub repository."
              }
            },
            "branch": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The branch name of the GitHub repository."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "privateEndpoints": {
              "$ref": "#/definitions/privateEndpointType",
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible. Note, requires the 'sku' to be 'Standard'."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "linkedBackend": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Object with \"resourceId\" and \"location\" of the a user defined function app."
              }
            },
            "appSettings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Static site app settings."
              }
            },
            "functionAppSettings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Function app settings."
              }
            },
            "customDomains": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The custom domains associated with this static site. The deployment will fail as long as the validation records are not present."
              }
            }
          },
          "variables": {
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.web-staticSite.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "staticSite": {
              "type": "Microsoft.Web/staticSites",
              "apiVersion": "2021-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "sku": {
                "name": "[parameters('sku')]",
                "tier": "[parameters('sku')]"
              },
              "properties": {
                "allowConfigFileUpdates": "[parameters('allowConfigFileUpdates')]",
                "stagingEnvironmentPolicy": "[parameters('stagingEnvironmentPolicy')]",
                "enterpriseGradeCdnStatus": "[parameters('enterpriseGradeCdnStatus')]",
                "provider": "[if(not(empty(parameters('provider'))), parameters('provider'), 'None')]",
                "branch": "[parameters('branch')]",
                "buildProperties": "[parameters('buildProperties')]",
                "repositoryToken": "[parameters('repositoryToken')]",
                "repositoryUrl": "[parameters('repositoryUrl')]",
                "templateProperties": "[parameters('templateProperties')]"
              }
            },
            "staticSite_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Web/staticSites/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "staticSite"
              ]
            },
            "staticSite_roleAssignments": {
              "copy": {
                "name": "staticSite_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Web/staticSites/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Web/staticSites', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "staticSite"
              ]
            },
            "staticSite_linkedBackend": {
              "condition": "[not(empty(parameters('linkedBackend')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-StaticSite-UserDefinedFunction', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "staticSiteName": {
                    "value": "[parameters('name')]"
                  },
                  "backendResourceId": {
                    "value": "[parameters('linkedBackend').resourceId]"
                  },
                  "region": "[if(contains(parameters('linkedBackend'), 'location'), createObject('value', parameters('linkedBackend').location), createObject('value', parameters('location')))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "15307923419105312167"
                    },
                    "name": "Static Web App Site Linked Backends",
                    "description": "This module deploys a Custom Function App into a Static Web App Site using the Linked Backends property.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "backendResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the backend linked to the static site."
                      }
                    },
                    "region": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The region of the backend linked to the static site."
                      }
                    },
                    "staticSiteName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Static Web App. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[uniqueString(parameters('backendResourceId'))]",
                      "metadata": {
                        "description": "Optional. Name of the backend to link to the static site."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/staticSites/linkedBackends",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('staticSiteName'), parameters('name'))]",
                      "properties": {
                        "backendResourceId": "[parameters('backendResourceId')]",
                        "region": "[parameters('region')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the static site linked backend."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the static site linked backend."
                      },
                      "value": "[resourceId('Microsoft.Web/staticSites/linkedBackends', parameters('staticSiteName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the static site linked backend was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "staticSite"
              ]
            },
            "staticSite_appSettings": {
              "condition": "[not(empty(parameters('appSettings')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-StaticSite-appSettings', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "kind": {
                    "value": "appsettings"
                  },
                  "staticSiteName": {
                    "value": "[parameters('name')]"
                  },
                  "properties": {
                    "value": "[parameters('appSettings')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "4029344815380998105"
                    },
                    "name": "Static Web App Site Config",
                    "description": "This module deploys a Static Web App Site Config.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "kind": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings",
                        "functionappsettings"
                      ],
                      "metadata": {
                        "description": "Required. Type of settings to apply."
                      }
                    },
                    "properties": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. App settings."
                      }
                    },
                    "staticSiteName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Static Web App. Required if the template is used in a standalone deployment."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/staticSites/config",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('staticSiteName'), parameters('kind'))]",
                      "properties": "[parameters('properties')]"
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the config."
                      },
                      "value": "[parameters('kind')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the config."
                      },
                      "value": "[resourceId('Microsoft.Web/staticSites/config', parameters('staticSiteName'), parameters('kind'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the config was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "staticSite"
              ]
            },
            "staticSite_functionAppSettings": {
              "condition": "[not(empty(parameters('functionAppSettings')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-StaticSite-functionAppSettings', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "kind": {
                    "value": "functionappsettings"
                  },
                  "staticSiteName": {
                    "value": "[parameters('name')]"
                  },
                  "properties": {
                    "value": "[parameters('functionAppSettings')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "4029344815380998105"
                    },
                    "name": "Static Web App Site Config",
                    "description": "This module deploys a Static Web App Site Config.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "kind": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings",
                        "functionappsettings"
                      ],
                      "metadata": {
                        "description": "Required. Type of settings to apply."
                      }
                    },
                    "properties": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. App settings."
                      }
                    },
                    "staticSiteName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Static Web App. Required if the template is used in a standalone deployment."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/staticSites/config",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('staticSiteName'), parameters('kind'))]",
                      "properties": "[parameters('properties')]"
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the config."
                      },
                      "value": "[parameters('kind')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the config."
                      },
                      "value": "[resourceId('Microsoft.Web/staticSites/config', parameters('staticSiteName'), parameters('kind'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the config was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "staticSite"
              ]
            },
            "staticSite_customDomains": {
              "copy": {
                "name": "staticSite_customDomains",
                "count": "[length(parameters('customDomains'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-StaticSite-customDomains-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('customDomains')[copyIndex()]]"
                  },
                  "staticSiteName": {
                    "value": "[parameters('name')]"
                  },
                  "validationMethod": "[if(equals(indexOf(parameters('customDomains')[copyIndex()], '.'), lastIndexOf(parameters('customDomains')[copyIndex()], '.')), createObject('value', 'dns-txt-token'), createObject('value', 'cname-delegation'))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "9170296310450777701"
                    },
                    "name": "Static Web App Site Custom Domains",
                    "description": "This module deploys a Static Web App Site Custom Domain.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The custom domain name."
                      }
                    },
                    "staticSiteName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Static Web App. Required if the template is used in a standalone deployment."
                      }
                    },
                    "validationMethod": {
                      "type": "string",
                      "defaultValue": "cname-delegation",
                      "metadata": {
                        "description": "Optional. Validation method for adding a custom domain."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/staticSites/customDomains",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('staticSiteName'), parameters('name'))]",
                      "properties": {
                        "validationMethod": "[parameters('validationMethod')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the static site custom domain."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the static site custom domain."
                      },
                      "value": "[resourceId('Microsoft.Web/staticSites/customDomains', parameters('staticSiteName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the static site custom domain was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "staticSite"
              ]
            },
            "staticSite_privateEndpoints": {
              "copy": {
                "name": "staticSite_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-staticSite-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/staticSites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'staticSites'), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/staticSites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'staticSites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/staticSites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'staticSites')))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/staticSites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'staticSites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/staticSites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'staticSites')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroupName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                  },
                  "privateDnsZoneResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "4120048060064073955"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ipConfigurationsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the resource that is unique within a resource group."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "memberName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateIPAddress": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private endpoint IP configurations."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "manualPrivateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customDnsConfigType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fqdn": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                            }
                          },
                          "ipAddresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A list of private IP addresses of the private endpoint."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "$ref": "#/definitions/ipConfigurationsType",
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroupName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                      }
                    },
                    "privateDnsZoneResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                          },
                          "privateDNSResourceIds": {
                            "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "11244630631275470040"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                    }
                  }
                }
              },
              "dependsOn": [
                "staticSite"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the static site."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the static site."
              },
              "value": "[resourceId('Microsoft.Web/staticSites', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the static site was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[coalesce(tryGet(tryGet(reference('staticSite', '2021-03-01', 'full'), 'identity'), 'principalId'), '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('staticSite', '2021-03-01', 'full').location]"
            },
            "defaultHostname": {
              "type": "string",
              "metadata": {
                "description": "The default autogenerated hostname for the static site."
              },
              "value": "[reference('staticSite').defaultHostname]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "appServiceAppHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appService'), '2022-09-01').outputs.appServiceAppHostName.value]"
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalytics'), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalytics'), '2022-09-01').outputs.logAnalyticsWorkspaceName.value]"
    },
    "appInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appInsights'), '2022-09-01').outputs.appInsightsInstrumentationKey.value]"
    },
    "appInsightsConnectionString": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appInsights'), '2022-09-01').outputs.appInsightsConnectionString.value]"
    },
    "staticWebAppEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'staticWebApp'), '2022-09-01').outputs.defaultHostname.value]"
    },
    "staticWebAppResourceName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'staticWebApp'), '2022-09-01').outputs.name.value]"
    }
  }
}